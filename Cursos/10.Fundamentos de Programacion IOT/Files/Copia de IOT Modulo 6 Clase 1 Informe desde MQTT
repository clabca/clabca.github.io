{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"11Xi01bQ8qvkOdfNoBPICKmF62-Hm_fPk","timestamp":1670429963599}],"authorship_tag":"ABX9TyPQDW4L9O2JhtHf8VVuRah1"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"xBFsjHCpDG-Y"},"outputs":[],"source":["pip install paho.mqtt"]},{"cell_type":"markdown","source":["Ejercicio 1\n","\n","En Salas de Grupo:\n","\n","• En el dispositivo Wemos deben publicar en un mensaje MQTT la\n","temperatura ambiente con el sensor DS18B20 cada 1 segundo.\n"],"metadata":{"id":"8_McPlGhVdv_"}},{"cell_type":"markdown","source":["\n","##codigo Wemos\n","```\n","# \n","#include <ESP8266WiFi.h>\n","#include <PubSubClient.h>\n","#include <DallasTemperature.h>\n","#define PIN_WIRE D5\n","OneWire oneWire(PIN_WIRE);\n","DallasTemperature sensors(&oneWire);\n","float Temp;\n","String temp_str; //see last code block below use these to convert the float that you get back from DHT to a string =str\n","char temp[50];\n","\n","// Update these with values suitable for your network.\n","const char* ssid = \"SISGE2\";\n","const char* password = \"1624VENUS\";\n","const char* mqtt_server = \"test.mosquitto.org\";\n","\n","WiFiClient espClient;\n","PubSubClient client(espClient);\n","unsigned long lastMsg = 0;\n","#define MSG_BUFFER_SIZE\t(50)\n","char msg[MSG_BUFFER_SIZE];\n","int value = 0;\n","\n","void setup_wifi() {\n","\n","  delay(10);\n","  // We start by connecting to a WiFi network\n","  Serial.println();\n","  Serial.print(\"Connecting to \");\n","  Serial.println(ssid);\n","  WiFi.mode(WIFI_STA);\n","  WiFi.begin(ssid, password);\n","  while (WiFi.status() != WL_CONNECTED) {\n","    delay(500);\n","    Serial.print(\".\");\n","  }\n","\n","  randomSeed(micros());\n","\n","  Serial.println(\"\");\n","  Serial.println(\"WiFi connected\");\n","  Serial.println(\"IP address: \");\n","  Serial.println(WiFi.localIP());\n","}\n","\n","\n","void reconnect() {\n","  // Loop until we're reconnected\n","  while (!client.connected()) {\n","    Serial.print(\"Attempting MQTT connection...\");\n","    // Create a random client ID\n","    String clientId = \"ESP8266Client-\";\n","    clientId += String(random(0xffff), HEX);\n","    // Attempt to connect\n","    if (client.connect(clientId.c_str())) {\n","      Serial.println(\"connected\");\n","      // Once connected, publish an announcement...\n","      client.publish(\"pucv/iot/m6/p2/g7\", \"hello world\");\n","      // ... and resubscribe\n","      client.subscribe(\"pucv/iot/m6/p2/g7nnn\");\n","    } else {\n","      Serial.print(\"failed, rc=\");\n","      Serial.print(client.state());\n","      Serial.println(\" try again in 5 seconds\");\n","      // Wait 5 seconds before retrying\n","      delay(5000);\n","    }\n","  }\n","}\n","\n","\n","\n","\n","void setup() {\n","  Serial.begin(115200);\n","  setup_wifi();\n","  client.setServer(mqtt_server, 1883);\n","}\n","\n","\n","void loop() {\n","  sensors.requestTemperatures();\n","  Temp=sensors.getTempCByIndex(0);   \n","  Serial.println(Temp);\n","\n","  if (!client.connected()) {\n","    reconnect();\n","  }\n","  client.loop();\n","\n","\n","  temp_str = String(Temp); //converting ftemp (the float variable above) to a string \n","  temp_str.toCharArray(temp, temp_str.length() + 1); //packaging up the data to publish to mqtt whoa...\n","  client.publish(\"pucv/iot/m6/p2/g7\", temp);\n","  delay(1000);\n","\n","}\n","\n","```\n"],"metadata":{"id":"J06O642HXlD0"}},{"cell_type":"markdown","source":["\n","• En Python deben crear una aplicación que muestre en consola, a\n","modo de resumen, la cantidad de mensajes recibidos, la temperatura\n","promedio, mínima y máxima, actualizada al último mensaje recibido\n","(tiempo real).\n","\n","•Vamos a utilizar estos parámetros:\n","• broker = \"test.mosquitto.org\"\n","• port = 1883\n","• topic = \"pucv/iot/m6/pX/gY\" #reemplazar X e Y por paralelo y sala\n","correspondiente\n"],"metadata":{"id":"xVQPHblhXoWp"}},{"cell_type":"code","source":["from paho.mqtt import client as mqtt_client\n","import time\n","import json\n","\n","broker = \"test.mosquitto.org\"\n","port = 1883\n","topic = \"pucv/iot/m6/p2/g7\"\n","lista = []\n","\n","import re\n","def truncate(num):\n","    return re.sub(r'^(\\d+\\.\\d{,2})\\d*$',r'\\1',str(num))\n","\n","\n","# Crea la conexion al broker\n","def connect_mqtt():\n","    def on_connect(client, userdata, flags, return_code):\n","        if return_code == 0:\n","            print(\"Conectado a MQTT broker! :)\")\n","        else:\n","            print(\"Error, codigo %d\\n\", return_code)\n","\n","    client = mqtt_client.Client()\n","    client.on_connect = on_connect\n","    client.connect(broker, port)\n","    return client\n","\n","# Crea la suscripcion al topic\n","def subscribe(client):\n","    def on_message(client, userdata, msg):\n","        data = msg.payload\n","        #print(json.loads(data))\n","        lista.append(float(data))\n","        #print(lista)\n","        print(\"Mensajes Recibidos \", len(lista) )\n","        print(\"Temperatura Promedio \", truncate(sum(lista)/len(lista) ))\n","        print(\"Temperatura Minima \", min(lista) )\n","        print(\"Temperatura Maxima \", max(lista) )\n","        print(\"Ultima Temperatura \", lista[-1] )\n","    client.subscribe(topic)\n","    client.on_message = on_message\n","\n","\n","# Ejecuta MQTT\n","def run():\n","    client = connect_mqtt()\n","    subscribe(client)\n","    client.loop_forever()\n","\n","# Press the green button in the gutter to run the script.\n","if __name__ == '__main__':\n","    run()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"RxXT2Q6cDPcz","executionInfo":{"status":"error","timestamp":1670429900990,"user_tz":180,"elapsed":21405,"user":{"displayName":"Cristian Labra Castro","userId":"00246304771870847321"}},"outputId":"ea3c934d-d41d-4412-af68-d717aba5d82d"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Conectado a MQTT broker! :)\n","Mensajes Recibidos  1\n","Temperatura Promedio  28.75\n","Temperatura Minima  28.75\n","Temperatura Maxima  28.75\n","Ultima Temperatura  28.75\n","Mensajes Recibidos  2\n","Temperatura Promedio  28.75\n","Temperatura Minima  28.75\n","Temperatura Maxima  28.75\n","Ultima Temperatura  28.75\n","Mensajes Recibidos  3\n","Temperatura Promedio  28.75\n","Temperatura Minima  28.75\n","Temperatura Maxima  28.75\n","Ultima Temperatura  28.75\n","Mensajes Recibidos  4\n","Temperatura Promedio  28.75\n","Temperatura Minima  28.75\n","Temperatura Maxima  28.75\n","Ultima Temperatura  28.75\n","Mensajes Recibidos  5\n","Temperatura Promedio  28.75\n","Temperatura Minima  28.75\n","Temperatura Maxima  28.75\n","Ultima Temperatura  28.75\n","Mensajes Recibidos  6\n","Temperatura Promedio  28.75\n","Temperatura Minima  28.75\n","Temperatura Maxima  28.75\n","Ultima Temperatura  28.75\n","Mensajes Recibidos  7\n","Temperatura Promedio  28.75\n","Temperatura Minima  28.75\n","Temperatura Maxima  28.75\n","Ultima Temperatura  28.75\n","Mensajes Recibidos  8\n","Temperatura Promedio  28.75\n","Temperatura Minima  28.75\n","Temperatura Maxima  28.75\n","Ultima Temperatura  28.75\n","Mensajes Recibidos  9\n","Temperatura Promedio  28.75\n","Temperatura Minima  28.75\n","Temperatura Maxima  28.75\n","Ultima Temperatura  28.75\n","Mensajes Recibidos  10\n","Temperatura Promedio  28.75\n","Temperatura Minima  28.75\n","Temperatura Maxima  28.81\n","Ultima Temperatura  28.81\n","Mensajes Recibidos  11\n","Temperatura Promedio  28.76\n","Temperatura Minima  28.75\n","Temperatura Maxima  28.81\n","Ultima Temperatura  28.81\n","Mensajes Recibidos  12\n","Temperatura Promedio  28.76\n","Temperatura Minima  28.75\n","Temperatura Maxima  28.81\n","Ultima Temperatura  28.75\n","Mensajes Recibidos  13\n","Temperatura Promedio  28.75\n","Temperatura Minima  28.75\n","Temperatura Maxima  28.81\n","Ultima Temperatura  28.75\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-36a7468f11b7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     50\u001b[0m \u001b[0;31m# Press the green button in the gutter to run the script.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'__main__'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m     \u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     53\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-15-36a7468f11b7>\u001b[0m in \u001b[0;36mrun\u001b[0;34m()\u001b[0m\n\u001b[1;32m     46\u001b[0m     \u001b[0mclient\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconnect_mqtt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     47\u001b[0m     \u001b[0msubscribe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclient\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 48\u001b[0;31m     \u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloop_forever\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     49\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m \u001b[0;31m# Press the green button in the gutter to run the script.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/paho/mqtt/client.py\u001b[0m in \u001b[0;36mloop_forever\u001b[0;34m(self, timeout, max_packets, retry_first_connection)\u001b[0m\n\u001b[1;32m   1754\u001b[0m             \u001b[0mrc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mMQTT_ERR_SUCCESS\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1755\u001b[0m             \u001b[0;32mwhile\u001b[0m \u001b[0mrc\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mMQTT_ERR_SUCCESS\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1756\u001b[0;31m                 \u001b[0mrc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_loop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1757\u001b[0m                 \u001b[0;31m# We don't need to worry about locking here, because we've\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1758\u001b[0m                 \u001b[0;31m# either called loop_forever() when in single threaded mode, or\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/paho/mqtt/client.py\u001b[0m in \u001b[0;36m_loop\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m   1148\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1149\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1150\u001b[0;31m             \u001b[0msocklist\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mselect\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mselect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrlist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwlist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1151\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1152\u001b[0m             \u001b[0;31m# Socket isn't correct type, in likelihood connection is lost\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]}]}