{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPyzx6t6JNndKG+GxoYfR/T"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":255},"id":"5xZ7Y_3nTlqO","executionInfo":{"status":"error","timestamp":1672446441348,"user_tz":180,"elapsed":4010,"user":{"displayName":"Cristian Labra Castro","userId":"00246304771870847321"}},"outputId":"c6c890ac-da25-4e2d-ab26-9e5444459d72"},"outputs":[{"output_type":"stream","name":"stdout","text":["{'id': '63ae1e2cf0cec0000d862eb4', 'name': 'temperature', 'icon': None, 'unit': '°C', 'label': 'temperature', 'datasource': {'id': '63ae1e2bf0cec0000d862eb2', 'name': 'pymaqclc1', 'url': 'http://industrial.api.ubidots.com/api/v1.6/datasources/63ae1e2bf0cec0000d862eb2', 'label': 'pymaqclc1'}, 'url': 'http://industrial.api.ubidots.com/api/v1.6/variables/63ae1e2cf0cec0000d862eb4', 'description': '', 'properties': {'_color': '#418bf8', 'maximum_value': 45.0, 'minimum_value': -10.0}, 'tags': [], 'created_at': '2022-12-29T23:09:32.593902Z', 'last_value': {'value': 26.0, 'timestamp': 1672446422789, 'context': {'set1': 123, 'status': 'cold'}, 'created_at': 1672446422789}, 'last_activity': 1672446422797, 'type': 0, 'derived_expr': '', 'values_url': 'http://industrial.api.ubidots.com/api/v1.6/variables/63ae1e2cf0cec0000d862eb4/values'}\n","{'id': '63ae1e2cf0cec0000d862eb4', 'name': 'temperature', 'icon': None, 'unit': '°C', 'label': 'temperature', 'datasource': {'id': '63ae1e2bf0cec0000d862eb2', 'name': 'pymaqclc1', 'url': 'http://industrial.api.ubidots.com/api/v1.6/datasources/63ae1e2bf0cec0000d862eb2', 'label': 'pymaqclc1'}, 'url': 'http://industrial.api.ubidots.com/api/v1.6/variables/63ae1e2cf0cec0000d862eb4', 'description': '', 'properties': {'_color': '#418bf8', 'maximum_value': 45.0, 'minimum_value': -10.0}, 'tags': [], 'created_at': '2022-12-29T23:09:32.593902Z', 'last_value': {'value': 26.0, 'timestamp': 1672446422789, 'context': {'set1': 123, 'status': 'cold'}, 'created_at': 1672446422789}, 'last_activity': 1672446422797, 'type': 0, 'derived_expr': '', 'values_url': 'http://industrial.api.ubidots.com/api/v1.6/variables/63ae1e2cf0cec0000d862eb4/values'}\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-51a65b595320>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     30\u001b[0m         \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m         \u001b[0mi\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m         \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["import requests\n","import random\n","import time\n","TOKEN = \"BBFF-SWigMmFJKDbbUzUy5RQzTIYYOGwzD5\"\n","#cuenta clabca\n","#TOKEN = \"BBFF-GIBTHUj83MRM0G5trb5riqvIQL7TLJ\"\n","#cuenta ingclabra\n","\n","DEVICE_LABEL = \"pymaqclc1\"\n","VARIABLE = \"temperature\"\n","\n","def main():\n","    url = \"http://industrial.api.ubidots.com\"\n","    url = \"{}/api/v1.6/devices/{}/{}\".format(url, DEVICE_LABEL, VARIABLE)\n","    headers = {\"X-Auth-Token\": TOKEN, \"Content-Type\": \"application/json\"}\n","    \n","    response = requests.get(url=url, headers=headers)\n","    \n","    if response.status_code == 200:\n","      data = response.json() #codifica el json de la respuesta\n","      res = data\n","      #res = data[\"last_value\"][\"context\"][\"set1\"]\n","      print(res) #imprime el json codificado\n","\n","\n","\n","if __name__ == '__main__':\n","    i = 0\n","    while i < 30:\n","        main()\n","        i += 1\n","        time.sleep(2)\n"]},{"cell_type":"code","source":[],"metadata":{"id":"JH7aQNOp7-JC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pip install request\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lqa-il-dVy6c","executionInfo":{"status":"ok","timestamp":1672358616899,"user_tz":180,"elapsed":1227,"user":{"displayName":"Cristian Labra Castro","userId":"00246304771870847321"}},"outputId":"96ec6c4d-40fc-4b64-fea8-8da322e8f8bf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","\u001b[31mERROR: Could not find a version that satisfies the requirement request (from versions: none)\u001b[0m\n","\u001b[31mERROR: No matching distribution found for request\u001b[0m\n"]}]}]}